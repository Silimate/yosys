log -header "Should be turned into a tree"
log -push
design -reset
read_verilog <<EOF
module top (
  input wire a,
  input wire b,
  input wire c,
  input wire d,
  output wire x,
);
  assign x = a & b & c & d;
endmodule
EOF
check -assert

autoname
write_json pre.json
exec -- netlistsvg pre.json -o pre.svg

# Check equivalence after opt_balance_tree
equiv_opt -assert opt_balance_tree

design -load postopt
# opt_balance_tree

autoname
write_json post.json
exec -- netlistsvg post.json -o post.svg

# Checks if y is still wired up to the correct gate
# select -set y_wires o:y %ci
# select -set y_driver @y_wires %ci
# select -set and_y_cell t:$and @y_driver %i
# select @and_y_cell -assert-count 1
# select -set inputs @and_y_cell %ci
# select -assert-count 1 @inputs i:c %i

design -reset
log -pop

log -header "Should not be turned into a tree"
log -push
design -reset
read_verilog <<EOF
module top (
  input wire a,
  input wire b,
  input wire c,
  input wire d,
  output wire x,
  output wire y,
  output wire z
);
  assign x = a & b;
  assign y = x & c;
  assign z = y & d;
endmodule
EOF
check -assert

# Check equivalence after opt_balance_tree
equiv_opt -assert opt_balance_tree

design -load postopt

# Checks if y is still wired up to the correct gate
select -set y_wires o:y %ci
select -set y_driver @y_wires %ci
select -set and_y_cell t:$and @y_driver %i
select @and_y_cell -assert-count 1
select -set inputs @and_y_cell %ci
select -assert-count 1 @inputs i:c %i

design -reset
log -pop

log -header "With a cell"
log -push
design -reset
read_verilog <<EOF
module top (
  input wire a,
  input wire b,
  input wire c,
  input wire d,
  output wire x,
  output wire y,
  output wire z
);
  wire temp;
  assign y = ~temp;
  assign x = a & b;
  assign temp = x & c;
  assign z = temp & d;
endmodule
EOF
check -assert

# Check equivalence after opt_balance_tree
equiv_opt -assert opt_balance_tree

design -load postopt
select -assert-count 3 t:$and

design -reset
log -pop

log -header "Word out port"
log -push
design -reset
read_verilog <<EOF
module top (
  input wire a,
  input wire b,
  input wire c,
  input wire d,
  output wire [2:0] x
);
  assign x[0] = a & b;
  assign x[1] = x[0] & c;
  assign x[2] = x[1] & d;
endmodule
EOF
check -assert

# Check equivalence after opt_balance_tree
equiv_opt -assert opt_balance_tree

design -load postopt
select -assert-count 3 t:$and

design -reset
log -pop

log -header "Fanout going to multiple outputs"
log -push
design -reset
read_verilog <<EOF
module top (
  input wire a,
  input wire b,
  input wire c,
  input wire d,
  output wire [2:0] x,
  output wire y
);
  assign x[0] = a & b;
  assign x[1] = x[0] & c;
  assign x[2] = x[1] & d;

  assign y = x[1];
endmodule
EOF
check -assert

# Check equivalence after opt_balance_tree
equiv_opt -assert opt_balance_tree

design -load postopt
select -assert-count 3 t:$and

design -reset
log -pop

log -header "Fanout going to multiple of the same word"
log -push
design -reset
read_verilog <<EOF
module top (
  input wire a,
  input wire b,
  input wire c,
  input wire d,
  output wire [3:0] x
);
  assign x[0] = a & b;
  assign x[1] = x[0] & c;
  assign x[2] = x[1] & d;
  assign x[3] = x[1];
endmodule
EOF
check -assert

# Check equivalence after opt_balance_tree
equiv_opt -assert opt_balance_tree

design -load postopt
select -assert-count 3 t:$and

design -reset
log -pop